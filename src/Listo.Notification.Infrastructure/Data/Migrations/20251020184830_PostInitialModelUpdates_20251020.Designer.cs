// <auto-generated />
using System;
using Listo.Notification.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Listo.Notification.Infrastructure.Data.Migrations
{
    [DbContext(typeof(NotificationDbContext))]
    [Migration("20251020184830_PostInitialModelUpdates_20251020")]
    partial class PostInitialModelUpdates_20251020
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Listo.Notification.Domain.Entities.AuditLogEntity", b =>
                {
                    b.Property<Guid>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AfterJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeforeJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceOrigin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AuditId");

                    b.HasIndex("OccurredAt")
                        .HasDatabaseName("IX_AuditLog_OccurredAt");

                    b.HasIndex("UserId", "OccurredAt")
                        .HasDatabaseName("IX_AuditLog_UserId_OccurredAt")
                        .HasFilter("UserId IS NOT NULL");

                    b.HasIndex("EntityType", "EntityId", "OccurredAt")
                        .HasDatabaseName("IX_AuditLog_EntityType_EntityId_OccurredAt");

                    b.ToTable("AuditLog", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.ConversationEntity", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParticipantsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConversationId");

                    b.HasIndex("LastMessageAt")
                        .HasDatabaseName("IX_Conversations_LastMessageAt");

                    b.ToTable("Conversations", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.CostTrackingEntity", b =>
                {
                    b.Property<Guid>("CostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TotalCostMicros")
                        .HasColumnType("bigint");

                    b.Property<long>("UnitCostMicros")
                        .HasColumnType("bigint");

                    b.Property<int>("UsageUnits")
                        .HasColumnType("int");

                    b.HasKey("CostId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_CostTracking_TenantId");

                    b.HasIndex("ServiceOrigin", "OccurredAt")
                        .HasDatabaseName("IX_CostTracking_ServiceOrigin_OccurredAt");

                    b.HasIndex("TenantId", "Channel", "OccurredAt")
                        .HasDatabaseName("IX_CostTracking_TenantId_Channel_OccurredAt");

                    b.HasIndex("TenantId", "ServiceOrigin", "OccurredAt")
                        .HasDatabaseName("IX_CostTracking_TenantId_ServiceOrigin_OccurredAt");

                    b.ToTable("CostTracking", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.DeviceEntity", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DeviceId");

                    b.HasIndex("DeviceToken")
                        .IsUnique()
                        .HasDatabaseName("UX_Devices_DeviceToken");

                    b.HasIndex("LastSeen")
                        .HasDatabaseName("IX_Devices_LastSeen");

                    b.HasIndex("UserId", "Active")
                        .HasDatabaseName("IX_Devices_UserId_Active");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MessageId");

                    b.HasIndex("ConversationId", "SentAt")
                        .HasDatabaseName("IX_Messages_ConversationId_SentAt");

                    b.HasIndex("RecipientUserId", "Status")
                        .HasDatabaseName("IX_Messages_RecipientUserId_Status")
                        .HasFilter("RecipientUserId IS NOT NULL");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderMessageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledFor")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("IX_Notifications_CorrelationId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Notifications_TenantId");

                    b.HasIndex("TenantId", "ServiceOrigin", "CreatedAt")
                        .HasDatabaseName("IX_Notifications_TenantId_ServiceOrigin_CreatedAt");

                    b.HasIndex("TenantId", "UserId", "CreatedAt")
                        .HasDatabaseName("IX_Notifications_TenantId_UserId_CreatedAt");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.NotificationQueueEntity", b =>
                {
                    b.Property<Guid>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Attempts")
                        .HasColumnType("int");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailHash")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EncryptedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedFirebaseToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EncryptedPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("NextAttemptAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayloadJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredLocale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QueueId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_NotificationQueue_CreatedAt");

                    b.HasIndex("EmailHash")
                        .HasDatabaseName("IX_NotificationQueue_EmailHash")
                        .HasFilter("EmailHash IS NOT NULL");

                    b.HasIndex("ScheduledAt", "Attempts")
                        .HasDatabaseName("IX_NotificationQueue_ScheduledAt_Attempts")
                        .HasFilter("NextAttemptAt IS NOT NULL");

                    b.ToTable("NotificationQueue", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.PreferenceEntity", b =>
                {
                    b.Property<Guid>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuietHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Topics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PreferenceId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Preferences_TenantId");

                    b.HasIndex("TenantId", "UserId")
                        .HasDatabaseName("IX_Preferences_TenantId_UserId");

                    b.HasIndex("TenantId", "UserId", "Channel")
                        .IsUnique()
                        .HasDatabaseName("UX_Preferences_TenantId_UserId_Channel");

                    b.ToTable("Preferences", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.RateLimitingEntity", b =>
                {
                    b.Property<Guid>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BurstSize")
                        .HasColumnType("int");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("PerServiceMax")
                        .HasColumnType("int");

                    b.Property<int>("PerServiceMaxCap")
                        .HasColumnType("int");

                    b.Property<int>("PerServiceWindowSeconds")
                        .HasColumnType("int");

                    b.Property<int>("PerUserMax")
                        .HasColumnType("int");

                    b.Property<int>("PerUserMaxCap")
                        .HasColumnType("int");

                    b.Property<int>("PerUserWindowSeconds")
                        .HasColumnType("int");

                    b.Property<string>("ServiceOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConfigId");

                    b.HasIndex("TenantId", "ServiceOrigin", "Channel")
                        .IsUnique()
                        .HasDatabaseName("UX_RateLimiting_TenantId_ServiceOrigin_Channel")
                        .HasFilter("[TenantId] IS NOT NULL");

                    b.ToTable("RateLimiting", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.RetryPolicyEntity", b =>
                {
                    b.Property<Guid>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BackoffFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BaseDelaySeconds")
                        .HasColumnType("int");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("JitterMs")
                        .HasColumnType("int");

                    b.Property<int>("MaxAttempts")
                        .HasColumnType("int");

                    b.Property<string>("ServiceOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimeoutSeconds")
                        .HasColumnType("int");

                    b.HasKey("PolicyId");

                    b.HasIndex("ServiceOrigin", "Channel")
                        .IsUnique()
                        .HasDatabaseName("UX_RetryPolicy_ServiceOrigin_Channel");

                    b.ToTable("RetryPolicy", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.TemplateEntity", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("TemplateId");

                    b.HasIndex("TemplateKey", "Channel", "Locale")
                        .HasDatabaseName("IX_Templates_TemplateKey_Channel_Locale")
                        .HasFilter("IsActive = 1");

                    b.HasIndex("TemplateKey", "Channel", "Locale", "Version")
                        .IsUnique()
                        .HasDatabaseName("UX_Templates_TemplateKey_Channel_Locale_Version");

                    b.ToTable("Templates", (string)null);
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.MessageEntity", b =>
                {
                    b.HasOne("Listo.Notification.Domain.Entities.ConversationEntity", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("Listo.Notification.Domain.Entities.ConversationEntity", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
